#!/usr/bin/env python
import os
import json
import sys
import getopt
from cbcli_logic import parse
from cbcli_logic import openlink
from cbcli_logic import search
from cbcli_logic import stringsearch
from cbcli_logic import cache
from cbcli_logic import loadCache
from cbcli_logic import tag_filter
import color
from regex import parallelmatch
from regex import regmatch
def print_usage():
    print "cbcli -[r|s(default)] search strings [-t <tagname>]"
    print "     r : regex mode"
    print "     s : string mode" 
    print "     t : search tag (#tagname) "

# The function to color the name of the bookmark based on the string tokens
# 
def color_str(text, stringtokens) :
    # define the new string tokens
    newstringtokens = []
    for s in stringtokens :
        newstringtokens.append(s.lower())
    # set the target
    stringtokens = newstringtokens
    # use the api to match the string tokens. 
    # I really forget how it works now, since it was coded a year + ago..
    # Just let it do its magic.
    (segments, matchcodes) = parallelmatch(text.lower(), stringtokens)
    # store the matched text
    match_text = ""
    i = 0
    for (segment, matchcode) in zip(segments, matchcodes) :
        # the output string is based on the origin text, but the string match
        # is based on the string.lower(), so we need to print the original text
        if(matchcode != -1) :
            match_text += color.wrap_color(text[i:i+len(segment)], color.green)
        else :
            match_text += text[i:i+len(segment)]
        i+=len(segment)
    return match_text

def color_regex(text, regex) :
    (segments, matchcodes) = regmatch(text, regex)
    match_text = ""
    for (segment, matchcode) in zip(segments, matchcodes) :
        if(matchcode != -1) :
            match_text += color.wrap_color(segment, color.green)
        else :
            match_text += segment
    return match_text


# display and cache the result.
def display_results_str(result, args, displaypath):
    listresult = []
    i = 0
    for key, value in result.items() :
        match_text = color_str(value["name"], args)
        parent = ""
        if displaypath :
            parent = color.wrap_color(value["parent"]+"/", color.blue)
        print color.wrap_color("["+str(i)+"]", color.yellow, True,False)  , parent , match_text, "-" , color.wrap_color(value["url"][:40] + "....", color.blue)
        listresult.append(value)
        i+=1
    cache(listresult)

def display_results_regex(result, regex, displaypath) :
    listresult = []
    i = 0
    for key, value in result.items() :
        match_text = color_regex(value["name"], regex)
        parent = ""
        if displaypath :
            parent = color.wrap_color(value["parent"]+"/", color.blue)
        print color.wrap_color("["+str(i)+"]", color.yellow, True,False)  , parent , match_text, "-" , color.wrap_color(value["url"][:40] + "....", color.blue)
        listresult.append(value)
        i+=1
    cache(listresult)

if __name__ == "__main__" :
    try :
        opts , args = getopt.getopt(sys.argv[1:], "rso:idt:", )
    except getopt.GetoptError:
        print_usage()
        sys.exit(1)
    mode = "string"
    displaypath = False
    opennumber=0
    tags = []
    for opt , arg in opts :
        if opt == "-r" :
            mode = "regex"
        elif opt == '-s' :
            mode = "string"
        elif opt == '-d' :
            displaypath = True
        elif opt == '-t' :
            tags.append(arg)
        elif opt == "-i" :
            mode = "info"
        elif opt == '-o' :
            try:
                opennumber = int(arg)
                mode = "open"
            except ValueError:
                print "Invalid number"
    # this is the path to the bookmarks on most macos system.
    # This probably can be taken out into a config. 
    # It is also possible to write a function to let the user set their bookmark file
    # or even autodetect.
    path = "~/Library/Application Support/Google/Chrome/Default/Bookmarks"
    path = os.path.expanduser(path)

    # open and read the json data, then parse it
    json_data = open(path).read()
    data = json.loads(json_data)
    (parsed, checksum, version) = parse(data)
    # if the -o option is set, we just try to open the number specified by the user.
    # If possible, perhaps display the urls and names of the last search if the number is not valid
    if mode == "open" :
        cachedResult = loadCache()
        if len(cachedResult) <= opennumber :
            print "number not valid"
        else :
            openlink(cachedResult[opennumber])
    # if string mode, then we want to find the url that contains all the strings.
    # Possible to make it such it handles OR case, but that is really not important, since
    # that use case is quite useless IMO.
    elif mode == "regex" :
        result = {}
        searchString = " ".join(args)
        result = search(parsed, searchString)
        display_results_regex(result, searchString, displaypath)
    elif mode == "info" :
        print "current checksum of bookmark : " , checksum
        print "current version  of bookmark : " , version
        print "bookmark location : " , path
    elif len(args) > 0:
        result = {} 
        searchdata = parsed
        for item in args :
            # I might need to escape the character but whatever.
            result = stringsearch(searchdata, item, tags)
            searchdata = result.values()
        display_results_str(result, args, displaypath)
    # regex mode, just search display
    elif len(tags) != 0  :
        result = tag_filter(parsed, tags)
        display_results_str(result, args, displaypath)
    else :
        print_usage()


